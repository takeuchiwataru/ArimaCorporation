//=============================================================================
//
// 回転シェーダー処理 [rotationshader.cpp]
// Author : 佐藤安純 Sato_Asumi
//
//=============================================================================
#include "rotationshader.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define FILENAME_SHADER		("data/Shader/RotationShader.hlsl")		// ローテーションシェーダー

//=============================================================================
// 生成処理
//=============================================================================
CRotationShader * CRotationShader::Create(void)
{
	CRotationShader * pRotationShader = new CRotationShader;
	pRotationShader->Init();

	return pRotationShader;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CRotationShader::CRotationShader(){}

//=============================================================================
// デストラクタ
//=============================================================================
CRotationShader::~CRotationShader(){}

//=============================================================================
// 初期化処理
//=============================================================================
void CRotationShader::Init()
{
	CBaceShader::Init(FILENAME_SHADER);
}

//=============================================================================
// 終了処理
//=============================================================================
void CRotationShader::Uninit()
{
	CBaceShader::Uninit();
}

//=============================================================================
// 描画設定
//=============================================================================
void CRotationShader::SetBegin(void)
{
	m_pShader->SetTechnique("StandardShader");
	m_pShader->Begin(0, 0);
}

//=============================================================================
// マトリックスの設定
//=============================================================================
void CRotationShader::SetMatrix(D3DXMATRIX * pMtxRot, D3DXMATRIX * pMtxWorld, D3DXMATRIX * pMtxView, D3DXMATRIX * pMtxProjection)
{
	m_pShader->SetMatrix("g_mtxRot", pMtxRot);					//向き
	m_pShader->SetMatrix("g_mtxWorld", pMtxWorld);				//ワールドマトリックス
	m_pShader->SetMatrix("g_mtxView", pMtxView);				//ビューマトリックス
	m_pShader->SetMatrix("g_mtxProjection", pMtxProjection);	//プロジェクションマトリックス
}

//=============================================================================
// 描画を始める
//=============================================================================
void CRotationShader::SetBeginPass(void)
{
	//シェーダーの描画を始める
	m_pShader->BeginPass(0);
}

//=============================================================================
// 描画終了
//=============================================================================
void CRotationShader::EndShader(void)
{
	//シェーダーの書き込みを終了する
	m_pShader->EndPass();
	m_pShader->End();
}

//=============================================================================
// 色の設定
//=============================================================================
void CRotationShader::SetCol_a(float col_a)
{
	m_pShader->SetFloat("g_Col_a", col_a);
}